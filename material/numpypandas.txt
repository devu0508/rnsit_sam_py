import numpy as np

# Problem 5: Finding indices where spendings are greater than 100

# Explanation: Using np.where() to find indices where the condition is met

spendings = np.array([50, 120, 30, 40, 200, 90, 300])
high_spenders = np.where(spendings > 100)
print(high_spenders)  # Output: Indices where the values are greater than 100


# Problem 6: Replacing values less than 50 with 0 in an array

# Explanation: Using np.where() to replace values meeting the condition

expenses = np.array([20, 60, 5, 80, 45, 90])
modified_expenses = np.where(expenses < 50, 0, expenses)
print(modified_expenses)  # Output: [ 0 60  0 80  0 90]

# Problem 7: Generating random floating-point numbers between 0 and 1

# Explanation: Using np.random.rand() to create a random array of given shape

random_data = np.random.rand(3, 4)  # Creates a 3x4 array with random values
print(random_data)

# Problem 8: Difference between np.arange() and np.linspace()

# Explanation: np.arange() generates values with a fixed step, while np.linspace() generates a set number of equally spaced values

sequence_arange = np.arange(1, 10, 3)  # Generates values from 1 to 10 with a step of 3
sequence_linspace = np.linspace(0, 100, 5)  # Generates 5 equally spaced values between 0 and 100
print("Using arange:", sequence_arange)
print("Using linspace:", sequence_linspace)


# Problem 9: Output of np.arange(1, 10, 3)

# Explanation: np.arange() generates numbers starting at 1, stopping before 10, with step size 3

sequence = np.arange(1, 10, 3)
print(sequence)  # Output: [ 1  4  7]


# Problem 10: Generating 23 equally spaced values between 0 and 100

# Explanation: Using np.linspace() to generate specified number of values in a range

values = np.linspace(0, 100, 23)
print("Generated values:", values)
print("Total count:", len(values))


# Problem 1: Creating a DataFrame

# Explanation: Using pandas to create a DataFrame from a dictionary

import pandas as pd
data = {'Name': ['Alice', 'Bob', 'Charlie'],
        'Age': [25, 30, 35],
        'Salary': [50000, 60000, 70000]}
df = pd.DataFrame(data)
print(df)

# Problem 2: Reading a CSV file and checking for missing values

# Explanation: Using pd.read_csv() to load data and checking for missing values using isnull()

df = pd.read_csv('data.csv')  # Reads the CSV file
df.head()  # Displays the first 5 rows
print(df.isnull().sum())  # Counts missing values in each column


# Problem 3: Filtering rows where Salary > 50000

# Explanation: Using boolean indexing to filter rows based on Salary column

high_salary = df[df['Salary'] > 50000]  # Filters rows based on Salary
print(high_salary)


# Problem 4: Sorting data by Salary in descending order

# Explanation: Using sort_values() to arrange rows based on Salary

df_sorted = df.sort_values(by='Salary', ascending=False)
print(df_sorted)


# Problem 5: Grouping data by Age and calculating mean Salary

# Explanation: Using groupby() to aggregate data and compute mean salary

grouped = df.groupby('Age')['Salary'].mean()  # Groups by Age and calculates mean salary
print(grouped)



# Problem 6: Creating a DataFrame from a dictionary

# Explanation: Creating a DataFrame using a dictionary with multiple columns

data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [25, 30, 35],
    'City': ['New York', 'Los Angeles', 'Chicago']
}
df = pd.DataFrame(data)  # Converts dictionary into a DataFrame
print(df)


# Problem 7: Checking for missing values in a DataFrame

# Explanation: Using isnull() to check for missing values and count occurrences

df = pd.DataFrame({
    'Name': ['Alice', 'Bob', None],
    'Age': [25, None, 35],
    'City': ['New York', 'Los Angeles', 'Chicago']
})
print(df.isnull())  # Identifies missing values
print(df.isnull().sum())  # Counts missing values per column




# Problem 8: Selecting a single column from a DataFrame

# Explanation: Accessing DataFrame columns using different methods

print(df['Name'])  # Access column using dictionary-style indexing
print(df.Age)      # Access column using dot notation




# Problem 9: Filtering rows in Pandas based on a condition

# Explanation: Using boolean indexing to filter rows where Age > 25

df_filtered = df[df['Age'] > 25]  # Selects rows where Age > 25
print(df_filtered)



# Problem 10: Grouping data in a DataFrame and applying aggregate functions

# Explanation: Using groupby() and agg() to perform multiple aggregations on grouped data

data = {
    'Department': ['IT', 'HR', 'IT', 'HR', 'IT'],
    'Salary': [60000, 55000, 70000, 58000, 75000]
}

df = pd.DataFrame(data)

# Grouping by Department and calculating mean, sum, and max salary
grouped_df = df.groupby('Department').agg({'Salary': ['mean', 'sum', 'max']})  
print(grouped_df)
